// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PiPlanningBackend.Data;

#nullable disable

namespace PiPlanningBackend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PiPlanningBackend.Models.Board", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AzureDevStoryPointField")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("AzureStoryPointField")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("AzureTestStoryPointField")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("DevTestToggle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFinalized")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("NumSprints")
                        .HasColumnType("integer");

                    b.Property<string>("Organization")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("Project")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("SprintDuration")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Boards");
                });

            modelBuilder.Entity("PiPlanningBackend.Models.Feature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AzureId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("BoardId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsFinalized")
                        .HasColumnType("boolean");

                    b.Property<int?>("Priority")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ValueArea")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("AzureId");

                    b.HasIndex("BoardId");

                    b.ToTable("Features");
                });

            modelBuilder.Entity("PiPlanningBackend.Models.Sprint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BoardId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.ToTable("Sprints");
                });

            modelBuilder.Entity("PiPlanningBackend.Models.TeamMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BoardId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDev")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTest")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.ToTable("TeamMembers");
                });

            modelBuilder.Entity("PiPlanningBackend.Models.TeamMemberSprint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("CapacityDev")
                        .HasColumnType("float");

                    b.Property<double>("CapacityTest")
                        .HasColumnType("float");

                    b.Property<int>("SprintId")
                        .HasColumnType("integer");

                    b.Property<int>("TeamMemberId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SprintId");

                    b.HasIndex("TeamMemberId", "SprintId");

                    b.ToTable("TeamMemberSprints");
                });

            modelBuilder.Entity("PiPlanningBackend.Models.UserStory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AzureId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<double?>("DevStoryPoints")
                        .HasColumnType("double precision");

                    b.Property<int>("FeatureId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsMoved")
                        .HasColumnType("boolean");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int?>("OriginalSprintId")
                        .HasColumnType("integer");

                    b.Property<int>("SprintId")
                        .HasColumnType("integer");

                    b.Property<double?>("StoryPoints")
                        .HasColumnType("double precision");

                    b.Property<double?>("TestStoryPoints")
                        .HasColumnType("double precision");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("AzureId");

                    b.HasIndex("FeatureId");

                    b.HasIndex("SprintId");

                    b.ToTable("UserStories");
                });

            modelBuilder.Entity("PiPlanningBackend.Models.Feature", b =>
                {
                    b.HasOne("PiPlanningBackend.Models.Board", "Board")
                        .WithMany("Features")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Board");
                });

            modelBuilder.Entity("PiPlanningBackend.Models.Sprint", b =>
                {
                    b.HasOne("PiPlanningBackend.Models.Board", "Board")
                        .WithMany("Sprints")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Board");
                });

            modelBuilder.Entity("PiPlanningBackend.Models.TeamMember", b =>
                {
                    b.HasOne("PiPlanningBackend.Models.Board", "Board")
                        .WithMany()
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Board");
                });

            modelBuilder.Entity("PiPlanningBackend.Models.TeamMemberSprint", b =>
                {
                    b.HasOne("PiPlanningBackend.Models.Sprint", "Sprint")
                        .WithMany("TeamMemberSprints")
                        .HasForeignKey("SprintId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PiPlanningBackend.Models.TeamMember", "TeamMember")
                        .WithMany("TeamMemberSprints")
                        .HasForeignKey("TeamMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sprint");

                    b.Navigation("TeamMember");
                });

            modelBuilder.Entity("PiPlanningBackend.Models.UserStory", b =>
                {
                    b.HasOne("PiPlanningBackend.Models.Feature", "Feature")
                        .WithMany("UserStories")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PiPlanningBackend.Models.Sprint", "Sprint")
                        .WithMany("UserStories")
                        .HasForeignKey("SprintId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Feature");

                    b.Navigation("Sprint");
                });

            modelBuilder.Entity("PiPlanningBackend.Models.Board", b =>
                {
                    b.Navigation("Features");

                    b.Navigation("Sprints");
                });

            modelBuilder.Entity("PiPlanningBackend.Models.Feature", b =>
                {
                    b.Navigation("UserStories");
                });

            modelBuilder.Entity("PiPlanningBackend.Models.Sprint", b =>
                {
                    b.Navigation("TeamMemberSprints");

                    b.Navigation("UserStories");
                });

            modelBuilder.Entity("PiPlanningBackend.Models.TeamMember", b =>
                {
                    b.Navigation("TeamMemberSprints");
                });
#pragma warning restore 612, 618
        }
    }
}
